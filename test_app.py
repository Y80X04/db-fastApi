#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import asyncpg
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from src.config import DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASS

async def test_app_database():
    try:
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        print(f"–•–æ—Å—Ç: {DB_HOST}:{DB_PORT}")
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection_string = f"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
        conn = await asyncpg.connect(connection_string)
        print("‚úì –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–∞–Ω–Ω—ã–µ
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = ['role', 'user', 'operation']
        for table in tables:
            try:
                count = await conn.fetchval(f"SELECT COUNT(*) FROM \"{table}\"" if table == 'user' else f"SELECT COUNT(*) FROM {table}")
                print(f"  ‚úì –¢–∞–±–ª–∏—Ü–∞ '{table}': {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"  ‚úó –¢–∞–±–ª–∏—Ü–∞ '{table}': –æ—à–∏–±–∫–∞ - {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π:")
        try:
            roles = await conn.fetch("SELECT id, name, permissions FROM role ORDER BY id")
            for role in roles:
                print(f"  ‚úì –†–æ–ª—å: {role['name']} (id: {role['id']})")
                print(f"    –ü—Ä–∞–≤–∞: {role['permissions']}")
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        try:
            users = await conn.fetch("SELECT id, username, email, role_id, is_active, is_superuser FROM \"user\" ORDER BY id")
            for user in users:
                print(f"  ‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']} (email: {user['email']})")
                print(f"    id: {user['id']}, role_id: {user['role_id']}")
                print(f"    active: {user['is_active']}, superuser: {user['is_superuser']}")
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        
        await conn.close()
        print("\n‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        from src.config import DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASS, DEFAULT_ADMIN_PASSWORD, DEFAULT_USER_PASSWORD
        
        print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}@{DB_HOST}:{DB_PORT}")
        print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {DB_USER}")
        print("  –ü–∞—Ä–æ–ª–∏: *** (—Å–∫—Ä—ã—Ç—ã)")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_ok = test_config()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = asyncio.run(test_app_database())
    
    print("\n" + "=" * 50)
    if config_ok and db_ok:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ:")
        print("  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        print("  - –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("  - –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print("  - –†–æ–ª–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        sys.exit(0)
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        sys.exit(1)
